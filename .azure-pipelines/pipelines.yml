trigger:
  branches:
    include:
      - "master"
      - "release/v*"
  tags:
    include:
      - "v*"

# PR build config is manually overridden in Azure pipelines UI with different secrets
pr: none

stages:
  - stage: format
    jobs:
      - job: code
        dependsOn: [] # this removes the implicit dependency on previous stage and causes this to run in parallel.
        pool:
          vmImage: "ubuntu-18.04"
        steps:
          - task: Cache@2
            inputs:
              key: "format | ./WORKSPACE | **/*.bzl"
              path: $(Build.StagingDirectory)/repository_cache
            continueOnError: true

          - script: ci/run_envoy_docker.sh 'ci/check_and_fix_format.sh'
            workingDirectory: $(Build.SourcesDirectory)
            env:
              ENVOY_DOCKER_BUILD_DIR: $(Build.StagingDirectory)
              BAZEL_REMOTE_CACHE: grpcs://remotebuildexecution.googleapis.com
              BAZEL_REMOTE_INSTANCE: projects/envoy-ci/instances/default_instance
              GCP_SERVICE_ACCOUNT_KEY: $(GcpServiceAccountKey)
            displayName: "Run check format scripts"

          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: "$(Build.StagingDirectory)/fix_format.diff"
              artifactName: format
            condition: failed()

      - job: docs
        dependsOn: [] # this removes the implicit dependency on previous stage and causes this to run in parallel.
        pool:
          vmImage: "ubuntu-18.04"
        steps:
          - task: Cache@2
            inputs:
              key: "format | ./WORKSPACE | **/*.bzl"
              path: $(Build.StagingDirectory)/repository_cache
            continueOnError: true

          - script: ci/run_envoy_docker.sh 'ci/do_ci.sh docs'
            workingDirectory: $(Build.SourcesDirectory)
            env:
              ENVOY_DOCKER_BUILD_DIR: $(Build.StagingDirectory)
              BAZEL_REMOTE_CACHE: grpcs://remotebuildexecution.googleapis.com
              BAZEL_REMOTE_INSTANCE: projects/envoy-ci/instances/default_instance
              GCP_SERVICE_ACCOUNT_KEY: $(GcpServiceAccountKey)
            displayName: "Generate docs"

          - script: ci/run_envoy_docker.sh 'ci/upload_gcs_artifact.sh /source/generated/docs docs'
            displayName: "Upload Docs to GCS"
            env:
              ENVOY_DOCKER_BUILD_DIR: $(Build.StagingDirectory)
              GCP_SERVICE_ACCOUNT_KEY: $(GcpServiceAccountKey)
              GCS_ARTIFACT_BUCKET: $(GcsArtifactBucket)
            condition: always()

  - stage: linux_x64
    displayName: "Linux-x64"
    dependsOn: ["format"]
    jobs:
      - job: release
        # For non-PR builds, continue even if format fails
        condition: and(not(canceled()), or(succeeded(), ne(variables['Build.Reason'], 'PullRequest')))
        timeoutInMinutes: 360
        pool:
          vmImage: "ubuntu-18.04"
        steps:
          - template: bazel.yml
            parameters:
              ciTarget: bazel.release

  - stage: linux_arm64
    displayName: "Linux-arm64"
    dependsOn: ["format"]
    jobs:
      - job: release
        # For non-PR builds, continue even if format fails
        condition: and(not(canceled()), or(succeeded(), ne(variables['Build.Reason'], 'PullRequest')))
        pool: "arm-large"
        steps:
          - template: bazel.yml
            parameters:
              managedAgent: false
              ciTarget: bazel.release.server_only
              rbe: false
              artifactSuffix: ".arm64"

  - stage: check
    dependsOn: ["linux_x64"]
    jobs:
      - job: rbe
        displayName: "Linux-x64"
        dependsOn: []
        strategy:
          maxParallel: 3
          matrix:
            compile_time_options:
              CI_TARGET: "bazel.compile_time_options"
            asan:
              CI_TARGET: "bazel.asan"
            tsan:
              CI_TARGET: "bazel.tsan"
            gcc:
              CI_TARGET: "bazel.gcc"
        timeoutInMinutes: 360
        pool:
          vmImage: "ubuntu-18.04"
        steps:
          - template: bazel.yml
            parameters:
              ciTarget: $(CI_TARGET)

      - job: local
        displayName: "Linux-x64"
        dependsOn: []
        timeoutInMinutes: 360
        pool: "x64-large"
        strategy:
          matrix:
            coverage:
              CI_TARGET: "coverage"
            fuzz_coverage:
              CI_TARGET: "fuzz_coverage"
            clang_tidy:
              CI_TARGET: "clang_tidy"
        steps:
          - template: bazel.yml
            parameters:
              managedAgent: false
              ciTarget: bazel.$(CI_TARGET)
              rbe: false
              # /tmp/sandbox_base is a tmpfs in CI environment to optimize large I/O for coverage traces
              bazelBuildExtraOptions: "--test_env=ENVOY_IP_TEST_VERSIONS=v4only --sandbox_base=/tmp/sandbox_base"

          - script: ci/run_envoy_docker.sh 'ci/upload_gcs_artifact.sh /source/generated/$(CI_TARGET) $(CI_TARGET)'
            displayName: "Upload $(CI_TARGET) Report to GCS"
            env:
              ENVOY_DOCKER_BUILD_DIR: $(Build.StagingDirectory)
              GCP_SERVICE_ACCOUNT_KEY: $(GcpServiceAccountKey)
              GCS_ARTIFACT_BUCKET: $(GcsArtifactBucket)
            condition: ne($(CI_TARGET), 'clang_tidy')

  - stage: macos
    displayName: "macOS"
    dependsOn: ["linux_x64"]
    jobs:
      - job: release
        timeoutInMinutes: 360
        pool:
          vmImage: "macos-latest"
        steps:
          - script: ./ci/mac_ci_setup.sh
            displayName: "Install dependencies"

          - script: ./ci/mac_ci_steps.sh
            displayName: "Run Mac CI"
            env:
              BAZEL_BUILD_EXTRA_OPTIONS: --remote_download_toplevel
              BAZEL_REMOTE_CACHE: grpcs://remotebuildexecution.googleapis.com
              BAZEL_REMOTE_INSTANCE: projects/envoy-ci/instances/default_instance
              GCP_SERVICE_ACCOUNT_KEY: $(GcpServiceAccountKey)

          - task: PublishTestResults@2
            inputs:
              testResultsFiles: "**/bazel-testlogs/**/test.xml"
              testRunTitle: "macOS"
            condition: always()

  - stage: windows
    displayName: "Windows"
    dependsOn: ["linux_x64"]
    jobs:
      - job: release
        timeoutInMinutes: 360
        pool:
          vmImage: "windows-latest"
        steps:
          - bash: ci/run_envoy_docker_windows.sh ci/windows_ci_steps.sh
            displayName: "Run Windows CI"
            env:
              ENVOY_RBE: "true"
              BAZEL_BUILD_EXTRA_OPTIONS: "--config=remote-ci --config=remote-msvc-cl --jobs=$(RbeJobs)"
              BAZEL_REMOTE_CACHE: grpcs://remotebuildexecution.googleapis.com
              BAZEL_REMOTE_INSTANCE: projects/envoy-ci/instances/default_instance
              GCP_SERVICE_ACCOUNT_KEY: $(GcpServiceAccountKey)

          - task: PublishTestResults@2
            inputs:
              testResultsFiles: "**/bazel-testlogs/**/test.xml"
              testRunTitle: "Windows"
            condition: always()

  - stage: linux_docker
    displayName: "Linux Docker"
    dependsOn: ["linux_x64"]
    jobs:
      - job: release
        condition: and(succeeded('linux_x64'), ne(variables['Build.Reason'], 'PullRequest'))
        pool:
          vmImage: "ubuntu-18.04"
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: current
              artifactName: "bazel.release"
              itemPattern: "bazel.release/envoy_binary.tar.gz"
              downloadType: single
              targetPath: $(Build.StagingDirectory)

          - bash: |
              set -e
              tar zxf $(Build.StagingDirectory)/bazel.release/envoy_binary.tar.gz
              ci/docker_ci.sh
            workingDirectory: $(Build.SourcesDirectory)
            env:
              AZP_BRANCH: $(Build.SourceBranch)
              AZP_SHA1: $(Build.SourceVersion)
              DOCKERHUB_USERNAME: $(DockerUsername)
              DOCKERHUB_PASSWORD: $(DockerPassword)
